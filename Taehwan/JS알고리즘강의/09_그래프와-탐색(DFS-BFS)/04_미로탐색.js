/**
 * 미로탐색(DFS)
7*7 격자판 미로를 탈출하는 경로의 가지수를 출력하는 프로그램을 작성하세요. 
출발점은 격 자의 (1, 1) 좌표이고, 탈출 도착점은 (7, 7)좌표이다. 
격자판의 1은 벽이고, 0은 통로이다. 
격 자판의 움직임은 상하좌우로만 움직인다. 
미로가 다음과 같다면 
위의 지도에서 출발점에서 도착점까지 갈 수 있는 방법의 수는 8가지이다.
▣ 입력설명
7*7 격자판의 정보가 주어집니다.
▣ 출력설명
첫 번째 줄에 경로의 가지수를 출력한다.
▣ 입력예제
0 0 0 0 0 0 0 
0 1 1 1 1 1 0 
0 0 0 1 0 0 0 
1 1 0 1 0 1 1 
1 1 0 0 0 0 1 
1 1 0 1 1 0 0 
1 0 0 0 0 0 0
▣ 출력예제
8
 */
function solution(board) {
  let answer = 0;
  /**
   * D(0,0) 을 기준으로 4 방향으로 가는 각각의 경우
   * D(-1,0), D(0,1), D(1,0), D(0,-1)
   * 위 4경우를 각각 방향으로 정리
   * => dx : D(-1,0)에서 x인 -1, D(0,1)에서 x인 0, ...
   * dx = [-1,0,1,0]
   * dy = [0,1,0,-1]
   */
  let dx = [-1, 0, 1, 0];
  let dy = [0, 1, 0, -1];
  const path = [];
  function DFS(x, y) {
    if (x === 6 && y === 6) {
      answer++;
      console.log(path);
    } else {
      for (let k = 0; k < 4; k++) {
        let nx = x + dx[k]; // 다음 x좌표
        let ny = y + dy[k]; // 다음 y좌표
        if (nx >= 0 && nx <= 6 && ny >= 0 && ny <= 6 && board[nx][ny] === 0) {
          // 경계 조건 안에 있을 때만 뻣어나가도록 함 : nx >= 0 && nx <= 6 && ny >= 0 && ny <= 6
          // 그리고 갈 수 있는 곳으로만 뻣어나가도록 함 : board[nx][ny] === 0
          board[nx][ny] = 1; // 지나간 곳은 못가는 곳이라고 체크
          path.push([nx, ny]);
          DFS(nx, ny);
          path.pop();
          board[nx][ny] = 0; // 다시 백할 땐 지나갈 수 있는 곳이라고 체크
        }
      }
    }
  }
  board[0][0] = 1; // 경로 탐색 하듯 처음 시작 지점을 사용했다고 체크
  DFS(0, 0);
  return answer;
}

let arr = [
  [0, 0, 0, 0, 0, 0, 0],
  [0, 1, 1, 1, 1, 1, 0],
  [0, 0, 0, 1, 0, 0, 0],
  [1, 1, 0, 1, 0, 1, 1],
  [1, 1, 0, 0, 0, 0, 1],
  [1, 1, 0, 1, 1, 0, 0],
  [1, 0, 0, 0, 0, 0, 0],
];

console.log(solution(arr));
