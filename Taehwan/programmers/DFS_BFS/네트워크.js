/**
 * <문제 설명>
 * 네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다.
 * 예를 들어, 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고,
 * 컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다.
 * 따라서 컴퓨터 A, B, C는 모두 같은 네트워크 상에 있다고 할 수 있습니다.
 * 컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때,
 * 네트워크의 개수를 return 하도록 solution 함수를 작성하시오.
 *
 * <제한사항>
 * 컴퓨터의 개수 n은 1 이상 200 이하인 자연수입니다.
 * 각 컴퓨터는 0부터 n-1인 정수로 표현합니다.
 * i번 컴퓨터와 j번 컴퓨터가 연결되어 있으면 computers[i][j]를 1로 표현합니다.
 * computer[i][i]는 항상 1입니다.
 *
 * <입출력 예>
 * n computers return
 * 3 [[1, 1, 0], [1, 1, 0], [0, 0, 1]] 2
 * 3 [[1, 1, 0], [1, 1, 1], [0, 1, 1]] 1
 */
/**
 * 방문한 노드를 기록하기 위한 배열을 생성하고 모두 false로 초기화합니다.
 * 모든 컴퓨터를 순회하면서 아직 방문하지 않은 컴퓨터를 찾습니다.
 * 방문하지 않은 컴퓨터를 발견하면 해당 컴퓨터부터 DFS를 시작합니다. DFS를 통해 해당 컴퓨터와 직접 또는 간접적으로 연결된 모든 컴퓨터들을 방문합니다.
 * DFS를 마치면 하나의 네트워크를 모두 방문한 것이므로 네트워크 개수를 1 증가시킵니다.
 * 모든 컴퓨터를 방문할 때까지 2-4단계를 반복합니다.
 * 모든 컴퓨터를 방문하였다면 네트워크 개수를 반환합니다.
 */
function solution(n, computers) {
  let visited = new Array(n).fill(false); // 방문 여부를 기록하는 배열
  let networks = 0; // 네트워크 개수를 저장하는 변수

  // DFS 함수 정의
  function dfs(computer) {
    visited[computer] = true; // 현재 컴퓨터를 방문 처리

    // 현재 컴퓨터와 연결된 다른 컴퓨터들을 순회
    for (let i = 0; i < n; i++) {
      if (computers[computer][i] === 1 && !visited[i]) {
        dfs(i); // 연결된 컴퓨터를 방문하기 위해 재귀 호출
      }
    }
  }

  // 모든 컴퓨터를 순회하면서 네트워크 개수 확인
  for (let i = 0; i < n; i++) {
    if (!visited[i]) {
      dfs(i);
      networks++;
    }
  }

  return networks;
}

// 테스트
console.log(
  solution(3, [
    [1, 1, 0],
    [1, 1, 0],
    [0, 0, 1],
  ])
); // 2
console.log(
  solution(3, [
    [1, 1, 0],
    [1, 1, 1],
    [0, 1, 1],
  ])
); // 1
